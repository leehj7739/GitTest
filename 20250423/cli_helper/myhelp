#!/bin/bash

# myhelp - 명령어 실행 결과를 AI로 분석하는 도우미 프로그램
# 버전: 1.0
# 작성일: 2024-04-23

# 색상 정의
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# 구분선 함수
print_separator() {
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

# 로그 파일 경로 설정
LOG_DIR="/tmp"
OUT_LOG="${LOG_DIR}/myhelp_output.log"
ERR_LOG="${LOG_DIR}/myhelp_error.log"

# 로그 파일 초기화 (없으면 생성)
[ ! -f "$OUT_LOG" ] && touch "$OUT_LOG"
[ ! -f "$ERR_LOG" ] && touch "$ERR_LOG"

# OpenAI API 키 설정
if [ -z "${OPENAI_API_KEY}" ]; then
    OPENAI_API_KEY="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"
fi

# API 키 확인
if [ -z "${OPENAI_API_KEY}" ]; then
    echo "오류: OPENAI_API_KEY가 설정되지 않았습니다."
    exit 1
fi

# 사용법 출력 함수
show_usage() {
    echo "사용법: myhelp [옵션] [명령어]"
    echo "옵션:"
    echo "  -h    도움말 표시"
    echo "  -v    상세 분석 모드 (최대 3가지 해결책 제안)"
    echo ""
    echo "명령어를 입력하지 않으면 마지막으로 실행한 명령어의 결과를 분석합니다."
    exit 0
}

# AI 분석 함수
analyze_with_ai() {
    local cmd="$1"
    local output="$2"
    local verbose="$3"
    
    local prompt
    if [ "$verbose" = "true" ]; then
        prompt="다음 명령어와 그 출력 결과를 분석하고 최대 3가지 해결책을 제안해주세요. 각 항목은 줄바꿈으로 구분하여 표시해주세요:\n\n명령어: $cmd\n\n출력:\n$output"
    else
        prompt="다음 명령어와 그 출력 결과를 간단히 요약해서 분석해주세요 (2-3줄 이내):\n\n명령어: $cmd\n\n출력:\n$output"
    fi

    # JSON 데이터 준비
    local json_data
    json_data=$(jq -n \
        --arg prompt "$prompt" \
        '{
            model: "gpt-4-turbo-preview",
            messages: [{role: "user", content: $prompt}],
            stream: true
        }')

    print_separator
    echo -e "\n${BOLD}🤖 분석 결과${NC}\n"
    print_separator
    echo

    # OpenAI API 스트리밍 호출
    curl -s "https://api.openai.com/v1/chat/completions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d "$json_data" | while read -r line; do
            if [[ $line == data:* ]]; then
                content=$(echo "$line" | sed 's/^data: //' | jq -r '.choices[0].delta.content // empty' 2>/dev/null)
                if [ ! -z "$content" ]; then
                    echo -n "$content"
                fi
            fi
        done

    echo -e "\n"
    print_separator
    echo
}

# 옵션 처리
verbose=false
while getopts "hv" opt; do
    case $opt in
        h)
            show_usage
            ;;
        v)
            verbose=true
            ;;
        \?)
            echo "잘못된 옵션입니다: -$OPTARG" >&2
            show_usage
            ;;
    esac
done
shift $((OPTIND-1))

# 명령어 실행 및 분석
if [ $# -eq 0 ]; then
    # 마지막 명령어 분석
    if [ -f "$OUT_LOG" ]; then
        # 마지막으로 실행된 명령어와 출력 가져오기
        last_cmd=$(tail -n 2 "$OUT_LOG" | head -n 1)
        last_output=$(tail -n 1 "$OUT_LOG")
        if [ -z "$last_cmd" ] || [[ "$last_cmd" == "myhelp"* ]]; then
            echo -e "${YELLOW}⚠️ 이전 명령어 기록이 없습니다.${NC}"
            exit 1
        fi
        echo -e "${GREEN}🔍 마지막 명령어 분석 중: ${BOLD}$last_cmd${NC}"
        analyze_with_ai "$last_cmd" "$last_output" "$verbose"
    else
        echo -e "${YELLOW}⚠️ 이전 명령어 기록이 없습니다.${NC}"
        exit 1
    fi
else
    # 새 명령어 실행 및 분석
    cmd="$*"
    # 명령어 실행 및 결과 저장
    output=$($cmd 2>&1)
    # 명령어와 출력을 로그에 저장
    echo "$cmd" >> "$OUT_LOG"
    echo "$output" >> "$OUT_LOG"
    # 결과 출력
    echo -e "${GREEN}📋 실행 결과:${NC}\n"
    echo "$output"
    echo -e "\n${GREEN}🔍 명령어 분석 중...${NC}"
    analyze_with_ai "$cmd" "$output" "$verbose"
fi
